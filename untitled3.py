# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cwG-jMyP3Zor1qvzjenm_TKxjAEO0rBL
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
import numpy as np

(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

y_train[:5]

y_train.reshape(-1,)

X_train[1]

classes = ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]

classes[0]

def plot_sample(X, y, index):
    plt.figure(figsize=(15, 2))
    plt.imshow(X[index]) #number to pixels
    plt.xlabel(classes[int(y[index])]) # Convert y[index] to an integerX

plot_sample(X_train, y_train, 0)

X_train

X_train , X_test = X_train / 255.0, X_test / 255.0

X_train

cnn = models. Sequential([
layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
layers. MaxPooling2D((2, 2)),

layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
layers.MaxPooling2D((2, 2)),

layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu'),
layers.MaxPooling2D((2, 2)),

layers.Flatten(),
layers.Dense(64,activation='relu'),
layers.Dense(10, activation='softmax') # Removed extra space before 'softmax'
])

cnn.compile(optimizer='adam',
loss='sparse_categorical_crossentropy',
metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=10)

cnn.evaluate(X_test, y_test)

y_test[:5]

plot_sample(X_test, y_test, 14)

y_pred = cnn.predict(X_test)

y_pred[:5]

np.argmax([1,13,5,7,2,9])

np.argmax(y_pred[1])

y_class = [np.argmax(element) for element in y_pred]
y_class[:5]

y_test[:5]

